#!/usr/bin/python3
import math as math
import sys

def string_to_matrix2(str):
    b = 0
    a = 0
    leng = math.ceil(math.sqrt(len(str)))
    m1 = [[0 for i in range(leng)] for j in range(leng)]
    for i in range(len(str)):
        m1[a][b] = ord(str[i])
        b = b + 1
        if (b == leng):
            a = a + 1
            b = 0
    return m1

def string_to_matrix3(str, long):
    b = 0
    a = 0
    leng = 1
    for i in str:
        if (i == ' '):
            leng = leng + 1
    leng = math.ceil((leng/long))
    m1 = [[0 for i in range(long)] for j in range(leng)]
    for i in range(len(str)):
        if (str[i] != ' '):
            m1[a][b] = m1[a][b] * 10 + ord(str[i]) - ord('0')
        if (str[i] == ' '):
            b = b + 1
        if (b == long):
            a = a + 1
            b = 0
    return m1

def string_to_matrix(str, long):
    leng = math.ceil((len(str) / long))
    b = 0
    a = 0
    m1 = [[0 for i in range (long)] for j in range(leng)]
    for i in range(len(str)):
        m1[a][b] = ord(str[i])
        b = b + 1
        if (b == long):
            a = a + 1
            b = 0
    return m1

def multi_matrice(m1, m2):
    lar_m1 = len(m1)
    len_m1 = len(m1[0])
    lar_m2 = len(m2)
    len_m2 = len(m2[0])
    if (len_m1 != lar_m2):
        exit(84)
    AB = [[0 for i in range (len_m2)] for j in range(lar_m1)]
    for i in range (lar_m1):
        for j in range (len_m2):
            for k in range (len_m2):
                AB[i][j] += m1[i][k] * m2[k][j]
    return AB

def transpose(m1):
    m2 = [[0 for i in range (len(m1))] for j in range(len(m1[0]))]
    for a in range(len(m1)):
        for b in range (len(m1[0])):
            m2[a][b] = m1[b][a]
    return m2

def det(m1):
    if (len(m1) != 2 or len(m1[0]) != 2) :
        exit(84)
    return m1[0][0] * m1[1][1] - (m1[0][1] * m1[1][0])

def adj(m):
    m[0][1] = -m[0][1]
    m[1][0] = -m[1][0]
    m[1][2] = -m[1][2]
    m[2][1] = -m[2][1]
    return m

def cofactor(m1, i, j):
    if (i == 1):
        if (j == 1):
            return (-1) ** (i + j) * det([[m1[1][1], m1[1][2]],[m1[2][1], m1[2][2]]])
        if (j == 2):
            return (-1) ** (i + j) *det([[m1[1][0], m1[1][2]],[m1[2][0], m1[2][2]]])
        if (j == 3):
            return (-1) ** (i + j) *det([[m1[1][0], m1[1][1]],[m1[2][0], m1[2][1]]])
    if (i == 2):
        if (j == 1):
            return (-1) ** (i + j) *det([[m1[0][1], m1[0][2]],[m1[2][1], m1[2][2]]])
        if (j == 2):
            return (-1) ** (i + j) *det([[m1[0][0], m1[0][2]],[m1[2][0], m1[2][2]]])
        if (j == 3):
            return (-1) ** (i + j) *det([[m1[0][0], m1[0][1]],[m1[2][0], m1[2][1]]])
    if (i == 3):
        if (j == 1):
            return (-1) ** (i + j) *det([[m1[0][1], m1[0][2]],[m1[1][1], m1[1][2]]])
        if (j == 2):
            return (-1) ** (i + j) *det([[m1[0][0], m1[0][2]],[m1[1][0], m1[1][2]]])
        if (j == 3):
            return (-1) ** (i + j) *det([[m1[0][0], m1[0][1]],[m1[1][0], m1[1][1]]])
def detm(m1):
    return m1[0][0] * cofactor(m1, 1, 1) + m1[0][1] * cofactor(m1, 1, 2) + m1[0][2] * cofactor(m1, 1,3)

def multi(m, nb):
    for i in range (len(m)):
        for j in range (len(m[i])):
            m[i][j] = nb * m[i][j]
    return m

def mcof(m1):
    m2 = [[0 for i in range (3)] for j in range(3)]
    m2[0][0] = cofactor(m1, 1, 1)
    m2[0][1] = cofactor(m1, 1, 2)
    m2[0][2] = cofactor(m1, 1, 3)
    m2[1][0] = cofactor(m1, 2, 1)
    m2[1][1] = cofactor(m1, 2, 2)
    m2[1][2] = cofactor(m1, 2, 3)
    m2[2][0] = cofactor(m1, 3, 1)
    m2[2][1] = cofactor(m1, 3, 2)
    m2[2][2] = cofactor(m1, 3, 3)
    return m2

def inv(m):
    m1 = [[0, 0], [0, 0]]
    if (len(m) == 1):
        m[0][0] = 1/m[0][0]
    if (len(m) == 2):
        if (det(m) == 0):
            exit(84)
        m1 = [[m[1][1], -m[0][1]], [-m[1][0], m[0][0]]]
        m = multi(m1,(1 / det(m)))
    if (len(m) == 3):
        if (detm(m) == 0):
            exit(84)
        m = multi(transpose(mcof(m)),(1 / detm(m)))
    return m

if (len(sys.argv) != 4):
    exit (84)
if (sys.argv[3] != '0' and sys.argv[3] != '1') :
    exit(84)
if (sys.argv[3] == '0'):
    m = string_to_matrix2(sys.argv[2])
    m1 = string_to_matrix(sys.argv[1], len(m))
    print("Key matrix:")
    for i in m:
        for j in range (len(i)):
            if (j != len(i) - 1):
                print(f"{i[j]}", end = '   ')
            if (j == len(i) - 1):
                print(i[j])
    print("\nEncrypted message:")
    m3 = multi_matrice(m1, m)
    for i in range(len(m3)):
            for j in range (len(m3[i])):
                print(f"{m3[i][j]}", end ='')
                if(i != len(m3) - 1 or j != len(m3[i]) - 1):
                    print(" ", end='')

if (sys.argv[3] == '1'):
    m = string_to_matrix2(sys.argv[2])
    m1 = string_to_matrix3(sys.argv[1], len(m))
    if (len(m) > 3):
        exit (84)
    m = inv(m)
    print("Key matrix:")
    for i in m:
        for j in range (len(i)):
            if (j != len(i) - 1):
                print(f"{i[j]:.3f}", end = '   ')
            if (j == len(i) - 1):
                print(f"{i[j]:.3f}")
    m3 = multi_matrice(m1, m)
    print("\nDecrypted message:")
    for i in range (len(m3)):
        for j in m3[i]:
            if (j < 0):
                j = -j
            if (j > 1):
                print(chr(round(j)), end='')

print()