#!/usr/bin/python3
import sys
import math
from os import path, stat

def usage():
    print("""USAGE
    ./109titration file
DESCRIPTION
    file    a csv file containing "vol;ph" lines""")

def print_titration(value1, value2):
    if (value1 > -0.01 and value1 < 0.01):
        value1 = abs(value1)
    if (value2 > -0.01 and value2 < 0.01):
        value2 = abs(value2)
    print(f"{value1:.1f} ml -> {value2:.2f}")

def error_handling():
    if (len(sys.argv) != 2):
        exit(84)
    tab = []
    for i in range (1, len(sys.argv)):
        tab.append(sys.argv[i])
        if not path.exists(sys.argv[i]):
            exit(84)
        if stat(sys.argv[i]).st_size == 0:
            exit(84)
    if (sys.argv[1].lower().endswith('.csv')):
        return tab
    exit(84)

def error_in_file(split_list):
    for i in range(len(split_list)):
        for j in range(len(split_list[i])):
            try:
                split_list[i][j] = float(split_list[i][j])
                if (split_list[i][j] < 0):
                    exit(84)
            except:
                exit(84)
    for i in range(len(split_list)):
        if (split_list[i][1] > 14):
            exit(84)

def build_parser(tab):
    split_list = []
    for arg in tab:
        file = open(arg, "r")
    split = file.read().split("\n")
    for i in range(len(split)):
        if split[i] != "":
            split_list.append(split[i].split(";"))
    error_in_file(split_list)
    return split_list

def div(nb, q):
    if q == 0:
        exit(84)
    return nb / q


def derivate_bis(n1, n2, n3, n4, n5, n6):
    result = div(n4 - n5, n1 - n2) * div(n3 - n1, n3 - n2)
    result += div(n6 - n4, n3 - n1) * div(n1 - n2, n3 - n2)
    return result

def derivate(tab, nb):
    result_tab = [[], []]
    for i in range(1, len(tab) - nb):
        result = derivate_bis(tab[i][0], tab[i - 1][0], tab[i + 1][0], tab[i][1], tab[i - 1][1], tab[i + 1][1])
        ##print_titration(tab[i][0], result)
        result_tab[0].append(tab[i][0])
        result_tab[1].append(result)
        tab[i - 1][0] = tab[i][0]
        tab[i - 1][1] = result
    return result_tab

def equivalence(tab):
    ph = 0
    ml = 0
    for i in range(1, len(tab) - 1):
        if ph < tab[i - 1][1]:
            ph = tab[i - 1][1]
            ml = tab[i - 1][0]
    return ml

def equivalence_bis(tab, eq):
    for i in range(len(tab[1])):
        tab[1][i] = abs(tab[1][i])
    ph = min(tab[1])
    index = 0
    for i in range(len(tab[1])):
        if (tab[1][i] == ph):
            index = i
            break
    ml = tab[0][index]
    return ml

def estimated_bis(n1, n2, n3, n4, n5):
    result = n4 + (n1 - n2) * div(n5 - n4, n3 - n2)
    return result

def estimated_derivate(tab, eq):
    start = 0
    start2 = 0
    for i in range(len(tab)):
        if (tab[i][0] == eq):
            start = i
            break
    for i in range(len(tab)):
        if (tab[len(tab) - i - 1][0] == eq):
            start2 = i
            break
    if (start2 < start):
        start = start2
    first = tab[start - 1][0]
    last = tab[start + 1][0]
    result = [[], []]
    i = 0
    while first <= last:
        result[0].append(first)
        if (first < tab[start][0]):
            result[1].append(estimated_bis(first, tab[start - 1][0], tab[start][0], tab[start - 1][1], tab[start][1]))
        else:
            result[1].append(estimated_bis(first, tab[start][0], tab[start + 1][0], tab[start][1], tab[start + 1][1]))
        ##print_titration(result[0][i], result[1][i])
        first += 0.1
        i += 1
    return result


def display(tab):
    result_tab = derivate(tab, 1)
    print("Derivative:")
    for i in range (len(result_tab[0])):
        print_titration(result_tab[0][i], result_tab[1][i])
    eq = equivalence(tab)
    if (eq > -0.01 and eq < 0.01):
        eq = abs(eq)
    print(f"\nEquivalence point at {eq:.1f} ml")
    result_tab2 = derivate(tab, 3)
    print("\nSecond derivative:")
    for i in range (len(result_tab2[0])):
        print_titration(result_tab2[0][i], result_tab2[1][i])
    print("\nSecond derivative estimated:")
    tab = estimated_derivate(tab, eq)
    for i in range (len(tab[0])):
        print_titration(tab[0][i], tab[1][i])
    eq = equivalence_bis(tab, eq)
    if (eq > -0.01 and eq < 0.01):
        eq = abs(eq)
    print(f"\nEquivalence point at {eq:.1f} ml")

def main():
    tab = error_handling()
    split_list = build_parser(tab)
    display(split_list)

main()